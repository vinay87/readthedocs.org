API v3
======

The Read the Docs API uses :abbr:`REST (Representational State Transfer)`.
JSON is returned by all API responses including errors
and HTTP response status codes are to designate success and failure.

.. warning::

   APIv3 is currently under development and it's not ready to use yet.


Authentication and authorization
--------------------------------

Requests to the Read the Docs public API are for public and private information
and do require authentication for all listing endpoints but not for all detailed ones.

No authentication
~~~~~~~~~~~~~~~~~

Some endpoints on read-only requests won't require any kind of authentication.
Most of them are detailed information for a particular object.

Token
~~~~~

All listing endpoints or those that perform non-readonly operations,
require authentication by using the HTTP header ``Authorization``
with a specific ``Token`` that provide full access identified as an user.


Session
~~~~~~~

.. TODO:

Resources
---------

Projects
~~~~~~~~

Projects list
+++++++++++++

.. http:get:: /api/v3/projects/

    Retrieve a list of all the projects for the current logged in user.

    **Example request**:

    .. sourcecode:: bash

        $ curl -H "Authorization: Token <token>" https://readthedocs.org/api/v3/projects/

    **Example response**:

    .. sourcecode:: js

        {
            "count": 25,
            "next": "/api/v3/projects/limit=10&offset=10",
            "previous": null,
            "results": [PROJECT]
        }

    :>json integer count: Total number of Projects.
    :>json string next: URI for next set of Projects.
    :>json string previous: URI for previous set of Projects.
    :>json array results: Array of ``Project`` objects.

.. TODO:

   Add query string filters to narrow the query:
     * privacy level
     * language
     * programming language
     * repo url
     * repo type
     * version active
     * version built
     * all database?


Project details
+++++++++++++++

.. http:get:: /api/v3/projects/(string:project_slug)/

    Retrieve details of a single project.

    .. sourcecode:: js

        {
            "name": "Pip",
            "slug": "pip",
            "description": "Pip Installs Packages.",
            "created": "2010-10-23T18:12:31+00:00",
            "modified": "2018-12-11T07:21:11+00:00",
            "language": {
                "code": "en",
                "name": "English"
            },
            "programming_language": {
                "code": "py",
                "name": "Python"
            }
            "repository": {
                "url": "https://github.com/pypa/pip",
                "type": "git"
            },
            "default_version": "stable",
            "default_branch": "master",
            "documentation_type": "sphinx_htmldir",
            "privacy_level": "public",
            "urls": {
                "documentation": "http://pip.pypa.io/en/stable/",
                "project": "https://pip.pypa.io/"
            }
            "last_build": {BUILD},
            "tags": [
                "disutils",
                "easy_install",
                "egg",
                "setuptools",
                "virtualenv"
            ],
            "maintainers": [
                "/api/v3/users/<username>/",
            ],
            "versions": [
                "/api/v3/projects/pip/versions/stable/"
                "/api/v3/projects/pip/versions/latest/",
                "/api/v3/projects/pip/versions/19.0.2/",
            ],
            "subprojects": [
                "/api/v3/projects/pip-subproject/"
            ],
            "translations": [
                "/api/v3/projects/pip-es/"
            ]
        }

    .. TODO: by default it should return *only active versions*, and
       having the posibility to return ``?versions__active=False`` or
       something like that. Otherwise, including all the versions by
       default will generate ton of data probably.


    :>json string name: The name of the project.
    :>json string slug: The project slug (used in the URL).
    :>json string description: An RST description of the project

    .. TODO: complete the returned data docs once agreed on this.

    :statuscode 200: Success
    :statuscode 404: There is no ``Project`` with this slug


.. note::

   This endpoint can be accessed anonymously.


.. TODO:

   Currently, v2 of this endpoint returns a lot of fields more like
   ``enable_epub_build``, ``skip``, etc.

   https://readthedocs.org/api/v2/project/?slug=pip


Versions
~~~~~~~~

Versions are different versions of the same project documentation.

The versions for a given project can be viewed in a project's version page.
For example, here is the `Pip project's version page`_.

.. _Pip project's version page: https://readthedocs.org/projects/pip/versions/


Version detail
++++++++++++++

.. http:get:: /api/v3/projects/(string:project_slug)/version/(string:version_slug)/

    Retrieve details of a single version.

    .. sourcecode:: js

        {
            "slug": "stable",
            "verbose_name": "stable",
            "identifier": "3a6b3995c141c0888af6591a59240ba5db7d9914",
            "built": true,
            "active": true,
            "type": "tag",
            "last_build": {BUILD},
            "downloads": {
                "pdf": "//readthedocs.org/projects/pip/downloads/pdf/stable/",
                "htmlzip": "//readthedocs.org/projects/pip/downloads/htmlzip/stable/",
                "epub": "//readthedocs.org/projects/pip/downloads/epub/stable/"
            }
        }

    :>json string slug: The slug for this version
    :>json string verbose_name: The name of the version
    :>json string identifier: A version control identifier for this version (eg. the commit hash of the tag)
    :>json string built: Whether this version has been built
    :>json string active: Whether this version is active
    :>json string type: The type of this version (typically "tag" or "branch")
    :>json string last_build: Build object representing the last build of this version
    :>json array downloads: URLs to downloads of this version's documentation

    :statuscode 200: Success
    :statuscode 404: There is no ``Version`` with this slug for this project


Version edit
++++++++++++

.. http:patch:: /api/v3/projects/(string:project_slug)/version/(string:version_slug)/

    Edit a version.

    **Example request**:

    .. sourcecode:: js

        {
            "active": true,
            "privacy_level": "public",
            "tags": [
                "python",
                "packaging"
            ]
        }

    :statuscode 204: Edited sucessfully
    :statuscode 400: Some field is invalid
    :statuscode 401: Not valid permissions
    :statuscode 404: There is no ``Version`` with this slug for this project


Builds
~~~~~~

Builds are created by Read the Docs whenever a ``Project`` has its documentation built.
Frequently this happens automatically via a web hook but can be triggered manually.

Builds can be viewed in the build page for a project.
For example, here is `Pip's build page`_.

.. _Pip's build page: https://readthedocs.org/projects/pip/builds/


.. TODO:

   for filtering by ``commit`` we need the build listing --the other cases are useless


Build detail
++++++++++++

There are two different ways to access to a specific build.
One is by accessing with the ``id`` of the build object.
The other way is by accessing by using the commit hash.

.. http:get:: /api/v3/builds/(int:build_id)/

    Retrieve details of a single build.

    .. sourcecode:: js

        {
            "id": 7367364,
            "version": "latest",
            "project": "pip",
            "created": "2018-06-19T15:15:59+00:00",
            "finished": "2018-06-19T15:16:58+00:00",
            "duration": 59,
            "state": {
                "code": "finished",
                "name": "Finished"
            },
            "success": true,
            "error": null,
            "commit": "6f808d743fd6f6907ad3e2e969c88a549e76db30",
            "builder": "build03",
            "cold_storage": false,
            "commands": [
                "/api/v3/buildcommands/7281720376/",
                "/api/v3/buildcommands/7281720377/",
            ],
        }


    :>json integer id: The ID of the build
    :>json string date: The ISO-8601 datetime of the build.
    :>json integer duration: The length of the build in seconds.
    :>json string state: The state of the build (one of "triggered", "building", "installing", "cloning", or "finished")
    :>json boolean success: Whether the build was successful
    :>json string error: An error message if the build was unsuccessful
    :>json string commit: A version control identifier for this build (eg. the commit hash)
    :>json string builder: The hostname server that built the docs
    :>json string cold_storage: Whether the build was removed from database and stored externally

    :statuscode 200: Success
    :statuscode 404: There is no ``Build`` with this ID


.. http:get:: /api/v3/projects/(str:project_slug)/builds/(str:commit_hash)/

    Retrieve details for all the builds matching the commit hash on this project.

    .. sourcecode:: js

        {
            "count": 15,
            "next": "/api/v3/projects/pip/builds/24f652b/?limit=10&offset=10",
            "previous": null,
            "results": [BUILD]
        }


Build triggering
++++++++++++++++


.. http:post:: /api/v3/projects/(string:project_slug)/builds/

    Trigger a new build for this project.

    **Example request**:

    .. sourcecode:: js

        {
            "version": "latest",
        }

    **Example response**:

    *See Build details*

    :statuscode 201: Created sucessfully
    :statuscode 400: Some field is invalid
    :statuscode 401: Not valid permissions


Build commands listing
++++++++++++++++++++++

.. http:get:: /api/v3/builds/(int:build_id)/commands/

    Retrieve build command list of a single build.

    .. sourcecode:: js

        {
            "count": 15,
            "next": "/api/v3/builds/719263915/commands/?limit=10&offset=10",
            "previous": null,
            "results": [BUILDCOMMAND]
        }


    :>json integer id: The ID of the build
    :>json string date: The ISO-8601 datetime of the build.
    :>json integer duration: The length of the build in seconds.


Build command details
+++++++++++++++++++++

.. http:get:: /api/v3/buildcommands/(int:buildcommand_id)/

    Retrieve build command detail.

    .. sourcecode:: js

        {
            "build": 719263915,
            "created": "2018-06-19T15:15:59+00:00",
            "finished": "2018-06-19T15:16:58+00:00",
            "duration": 59,
            "command": "cat docs/config.py",
            "output": "...",
            "exit_code": 0
        }
